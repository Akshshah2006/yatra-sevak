import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from datetime import datetime, timedelta, date
import matplotlib.pyplot as plt
import folium
from streamlit_folium import folium_static
from sklearn.model_selection import train_test_split
import io

# Temple Data: Coords & Base Daily Footfall (from Gujarat Tourism/Wiki)
TEMPLE_DATA = {
    'Somnath': {'lat': 20.888, 'lng': 70.401, 'base_footfall': 50000},  # ~18M annual 
    'Dwarka': {'lat': 22.238, 'lng': 68.968, 'base_footfall': 25000},    # ~9M annual 
    'Ambaji': {'lat': 24.333, 'lng': 72.850, 'base_footfall': 25000},    # ~9M annual 
    'Pavagadh': {'lat': 22.461, 'lng': 73.512, 'base_footfall': 6000}    # ~2.2M annual 
}
# Hardcoded Multilingual Support (Expanded)
# Fix: Define English first, then copy for others
english_trans = {
    'title': 'ЁЯЫХ Yatra Sevak: Multi-Temple Management (4 Sites)',
    'select_temple': 'Select Temple',
    'home_info': 'Home & Temple Info ',
    'join_queue': 'Smart Queue & Ticketing ',
    'sos_nav': 'Emergency & Safety ',
    'surveillance': 'IoT & Surveillance ',
    'traffic': 'Traffic & Mobility ',
    'accessibility': 'Accessibility Features ',
    'prediction': 'AI Crowd Prediction ',
    'pilgrim_app': 'Pilgrim View',
    'authority_dashboard': 'Authority Dashboard',
    'language': 'Language / ркнрк╛рк╖рк╛ / рднрд╛рд╖рд╛',
    'view_as': 'View As',
    'temple_info_wait': 'Engagement: Timings, Routes, Facilities ',
    'current_weather': 'Weather (for ): 28┬░C (Sim). Routes Below.',
    'virtual_darshan': 'Virtual Queue Management',
    'elderly_priority': 'Priority for Elderly/Disabled ',
    'join_btn': 'Get Digital Darshan Pass',
    'simulate_turn': 'Simulate Your Turn',
    'token_issued': 'Pass Issued! Wait: {} mins. Slot: {}. Real-time Update.',
    'your_turn': 'Your Turn! Proceed.',
    'emergency_sos': 'SOS Button ',
    'press_sos': 'ЁЯЪи Press SOS',
    'sos_sent': 'SOS Sent! First Responders Alerted. Drone Dispatched.',
    'voice_guide': 'Voice-Guided Navigation ',
    'audio_sim': "Voice: 'Turn left 50m to priority entry.'",
    'surge_alert': 'Surge Forecast: Limiting Slots (#1 тЖТ #2)',
    'scan_now': 'Scan CCTV/Sensors/Drones',
    'crowded': 'Crowded (High Density)',
    'safe': 'Safe',
    'panic_detected': 'ЁЯЪи Panic at {}! Triggered Alert (#3 тЖТ #4). Notify App .',
    'active_queues': 'Queues & Alerts (#2, #4)',
    'no_alerts': 'No Alerts.',
    'dispatch': 'Dispatch Responders',
    'dispatched': 'Dispatched! (Police/Medical).',
    'parking_mobility': 'Parking Guidance & Shuttle ',
    'empty_spots': 'Empty Spots: {}/10. Police-Integrated Flow.',
    'footer': 'Scalable to 4 Temples: Ambaji, Dwarka, Pavagadh, Somnath. All 7 Features Integrated. тЭдя╕П',
    'predicted_crowd': 'Predicted Footfall',
    'temple_timings': 'Timings: 5AM-9PM ',
    'facilities': 'Facilities: Restrooms, Food, Medical ',
    'emergency_contacts': 'Contacts: Police 100, Medical 108 ',
    'routes': 'Routes: Gate тЖТ Hall тЖТ Exit ',
    'medical_map': 'Medical Mapping ',
    'barricades': 'Smart Barricades ',
    'drone_dispatch': 'Drone Dispatched w/ Camera/Speaker/Kit ',
    'dynamic_slots': 'Dynamic Slots: Free if Low Demand ',
    'voice_nav': 'Voice Mode for Visually Impaired ',
    'shuttle_schedule': 'Shuttle Coordination ',
    'traffic_flow': 'Dynamic Traffic '
}

TRANSLATIONS = {
    'English': english_trans,
    'Gujarati': {
        **english_trans,
        'title': 'ЁЯЫХ ркпрк╛ркдрлНрк░рк╛ рк╕рлЗрк╡ркХ: ркорк▓рлНркЯрлА-ркоркВркжрк┐рк░ рк╡рлНркпрк╡рк╕рлНркерк╛рккрки (4 рк╕рлНркерк│рлЛ)',
        'select_temple': 'ркоркВркжрк┐рк░ рккрк╕ркВркж ркХрк░рлЛ',
        'home_info': 'ркШрк░ ркЕркирлЗ ркоркВркжрк┐рк░ ркорк╛рк╣рк┐ркдрлА (#6)',
        'join_queue': 'рк╕рлНркорк╛рк░рлНркЯ ркХркдрк╛рк░ ркЕркирлЗ ркЯрк┐ркХрк┐ркЯрк┐ркВркЧ (#2)',
        'sos_nav': 'ркЗркорк░ркЬркирлНрк╕рлА ркЕркирлЗ рк╕рлБрк░ркХрлНрк╖рк╛ (#4)',
        'surveillance': 'IoT ркЕркирлЗ рк╕рк░рлНрк╡рлЗрк▓ркирлНрк╕ (#3)',
        'traffic': 'ркЯрлНрк░рк╛рклрк┐ркХ ркЕркирлЗ ркорлЛркмрк┐рк▓рк┐ркЯрлА (#5)',
        'accessibility': 'рккрк╣рлЛркВркЪрк╡рк╛ркирлА рк╕рлБрк╡рк┐ркзрк╛ркУ (#7)',
        'prediction': 'AI ркнрлАркб ркЕркирлБркорк╛рки (#1)',
        'pilgrim_app': 'ркдрлАрк░рлНркеркпрк╛ркдрлНрк░рлА рк╡рлНркпрлВ',
        'authority_dashboard': 'ркЕркзрк┐ркХрк╛рк░рлА ркбрлЗрк╢ркмрлЛрк░рлНркб',
        'language': 'ркнрк╛рк╖рк╛ / ркнрк╛рк╖рк╛ / рднрд╛рд╖рд╛',
        'view_as': 'ркЬрлЛрк╡рк╛ ркорк╛ркЯрлЗ',
        'temple_info_wait': 'ркПркирлНркЧрлЗркЬркорлЗркирлНркЯ: рк╕ркоркп, ркорк╛рк░рлНркЧ, рк╕рлБрк╡рк┐ркзрк╛ркУ (#6)',
        'current_weather': 'рк╣рк╡рк╛ркорк╛рки (#1): 28┬░C (рк╕рк┐рко). ркирлАркЪрлЗ ркорк╛рк░рлНркЧрлЛ.',
        'virtual_darshan': 'рк╡рк░рлНркЪрлНркпрлБркЕрк▓ ркХркдрк╛рк░ рк╡рлНркпрк╡рк╕рлНркерк╛рккрки',
        'elderly_priority': 'рк╡рлГркжрлНркз/ркЕрккркВркЧ ркорк╛ркЯрлЗ рккрлНрк░рк╛ркпрлЛрк░рк┐ркЯрлА (#7)',
        'join_btn': 'ркбрк┐ркЬрк┐ркЯрк▓ ркжрк░рлНрк╢рки рккрк╛рк╕ ркорлЗрк│рк╡рлЛ',
        'simulate_turn': 'ркдркорк╛рк░рлА рк╡рк╛рк░ рк╕рк┐ркорлНркпрлБрк▓рлЗркЯ ркХрк░рлЛ',
        'token_issued': 'рккрк╛рк╕ ркЬрк╛рк░рлА! рк╡рк╛ркЯ: {} ркорк┐рки. рк╕рлНрк▓рлЛркЯ: {}. рк░рлАркЕрк▓-ркЯрк╛ркЗрко ркЕрккркбрлЗркЯ.',
        'your_turn': 'ркдркорк╛рк░рлА рк╡рк╛рк░! ркЖркЧрк│ рк╡ркзрлЛ.',
        'emergency_sos': 'SOS ркмркЯрки (#4)',
        'press_sos': 'ЁЯЪи SOS ркжркмрк╛рк╡рлЛ',
        'sos_sent': 'SOS ркорлЛркХрк▓рк╛ркпрлБркВ! рккрлНрк░ркерко рккрлНрк░ркдрк┐ркнрк╛ркЧрлАркУ ркЕрк▓рк░рлНркЯ. ркбрлНрк░рлЛрки ркорлЛркХрк▓рк╛ркпрлБркВ.',
        'voice_guide': 'рк╡рлЙркЗрк╕-ркЧрк╛ркЗркбрлЗркб ркирлЗрк╡рк┐ркЧрлЗрк╢рки (#7)',
        'audio_sim': "рк╡рлЙркЗрк╕: '50mркорк╛ркВ ркбрк╛ркмрлА рк╡рк│рлЛ рккрлНрк░рк╛ркпрлЛрк░рк┐ркЯрлА ркПркирлНркЯрлНрк░рлА ркдрк░ркл.'",
        'surge_alert': 'рк╕рк░рлНркЬ ркЕркирлБркорк╛рки: рк╕рлНрк▓рлЛркЯрлНрк╕ ркорк░рлНркпрк╛ркжрк┐ркд (#1 тЖТ #2)',
        'scan_now': 'CCTV/рк╕рлЗркирлНрк╕рк░/ркбрлНрк░рлЛрки рк╕рлНркХрлЗрки',
        'crowded': 'ркнрлАркб (ркЙркЪрлНркЪ ркШркиркдрк╛)',
        'safe': 'рк╕рлБрк░ркХрлНрк╖рк┐ркд',
        'panic_detected': 'ЁЯЪи {} рккрк░ рккрлЗркирк┐ркХ! ркЕрк▓рк░рлНркЯ ркЯрлНрк░рк┐ркЧрк░ (#3 тЖТ #4). ркПрккркирлЗ ркЬрк╛ркг (#6).',
        'active_queues': 'ркХркдрк╛рк░рлЛ ркЕркирлЗ ркЕрк▓рк░рлНркЯрлНрк╕ (#2, #4)',
        'no_alerts': 'ркХрлЛркИ ркЕрк▓рк░рлНркЯрлНрк╕ ркиркерлА.',
        'dispatch': 'рккрлНрк░ркдрк┐ркнрк╛ркЧрлАркУ ркорлЛркХрк▓рлЛ',
        'dispatched': 'ркорлЛркХрк▓рк╛ркпрлБркВ! (рккрлЛрк▓рлАрк╕/ркорлЗркбрк┐ркХрк▓).',
        'parking_mobility': 'рккрк╛рк░рлНркХрк┐ркВркЧ ркорк╛рк░рлНркЧркжрк░рлНрк╢рки ркЕркирлЗ рк╢ркЯрк▓ (#5)',
        'empty_spots': 'ркЦрк╛рк▓рлА ркЬркЧрлНркпрк╛: {}/10. рккрлЛрк▓рлАрк╕-ркПркХрлАркХрлГркд рклрлНрк▓рлЛ.',
        'footer': '4 ркоркВркжрк┐рк░рлЛ ркорк╛ркЯрлЗ рк╡рк┐рк╕рлНркдрк░ркгрлАркп: ркЕркВркмрк╛ркЬрлА, ркжрлНрк╡рк╛рк░ркХрк╛, рккрк╛рк╡рк╛ркЧркв, рк╕рлЛркоркирк╛рке. ркмркзрлА 7 рклрлАркЪрк░рлНрк╕ ркПркХрлАркХрлГркд. тЭдя╕П',
        'predicted_crowd': 'ркЕркирлБркорк╛ркирк┐ркд ркнрлАркб',
        'temple_timings': 'рк╕ркоркп: 5AM-9PM (#6)',
        'facilities': 'рк╕рлБрк╡рк┐ркзрк╛ркУ: рк░рлЗрк╕рлНркЯрк░рлВрко, ркЦрк╛рк╡рк╛ркирлБркВ, ркорлЗркбрк┐ркХрк▓ (#6)',
        'emergency_contacts': 'рк╕ркВрккрк░рлНркХ: рккрлЛрк▓рлАрк╕ 100, ркорлЗркбрк┐ркХрк▓ 108 (#6)',
        'routes': 'ркорк╛рк░рлНркЧ: ркЧрлЗркЯ тЖТ рк╣рлЛрк▓ тЖТ ркПркХрлНркЭрк┐ркЯ (#6)',
        'medical_map': 'ркорлЗркбрк┐ркХрк▓ ркорлЗрккрк┐ркВркЧ (#4)',
        'barricades': 'рк╕рлНркорк╛рк░рлНркЯ ркмрлЗрк░рк┐ркХрлЗркбрлНрк╕ (#4)',
        'drone_dispatch': 'ркХрлЗркорлЗрк░рк╛/рк╕рлНрккрлАркХрк░/ркХрлАркЯ рк╕рк╛ркерлЗ ркбрлНрк░рлЛрки ркорлЛркХрк▓рк╛ркпрлБркВ (#4)',
        'dynamic_slots': 'ркбрк╛ркпркирлЗркорк┐ркХ рк╕рлНрк▓рлЛркЯрлНрк╕: ркУркЫрлА ркорк╛ркВркЧркорк╛ркВ ркорклркд (#2)',
        'voice_nav': 'ркжрлНрк░рк╖рлНркЯрк┐рк╣рлАрки ркорк╛ркЯрлЗ рк╡рлЙркЗрк╕ ркорлЛркб (#7)',
        'shuttle_schedule': 'рк╢ркЯрк▓ ркХрлЛрк░рлНркбрк┐ркирлЗрк╢рки (#5)',
        'traffic_flow': 'ркбрк╛ркпркирлЗркорк┐ркХ ркЯрлНрк░рк╛рклрк┐ркХ (#5)'
    },
    'Hindi': {
        **english_trans,
        'title': 'ЁЯЫХ рдпрд╛рддреНрд░рд╛ рд╕реЗрд╡рдХ: рдорд▓реНрдЯреА-рдордВрджрд┐рд░ рдкреНрд░рдмрдВрдзрди (4 рд╕реНрдерд▓)',
        'select_temple': 'рдордВрджрд┐рд░ рдЪреБрдиреЗрдВ',
        'home_info': 'рдШрд░ рдФрд░ рдордВрджрд┐рд░ рдЬрд╛рдирдХрд╛рд░реА (#6)',
        'join_queue': 'рд╕реНрдорд╛рд░реНрдЯ рдХрддрд╛рд░ рдФрд░ рдЯрд┐рдХрдЯрд┐рдВрдЧ (#2)',
        'sos_nav': 'рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдФрд░ рд╕реБрд░рдХреНрд╖рд╛ (#4)',
        'surveillance': 'IoT рдФрд░ рдирд┐рдЧрд░рд╛рдиреА (#3)',
        'traffic': 'рдЯреНрд░реИрдлрд┐рдХ рдФрд░ рдореЛрдмрд┐рд▓рд┐рдЯреА (#5)',
        'accessibility': 'рдкрд╣реБрдВрдЪ рд╕реБрд╡рд┐рдзрд╛рдПрдВ (#7)',
        'prediction': 'AI рднреАрдбрд╝ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди (#1)',
        'pilgrim_app': 'рддреАрд░реНрдердпрд╛рддреНрд░реА рд╡реНрдпреВ',
        'authority_dashboard': 'рдкреНрд░рд╛рдзрд┐рдХрд░рдг рдбреИрд╢рдмреЛрд░реНрдб',
        'language': 'рднрд╛рд╖рд╛ / ркнрк╛рк╖рк╛ / рднрд╛рд╖рд╛',
        'view_as': 'рджреЗрдЦреЗрдВ рдХреЗ рд░реВрдк рдореЗрдВ',
        'temple_info_wait': 'рдПрдВрдЧреЗрдЬрдореЗрдВрдЯ: рд╕рдордп, рдорд╛рд░реНрдЧ, рд╕реБрд╡рд┐рдзрд╛рдПрдВ (#6)',
        'current_weather': 'рдореМрд╕рдо (#1): 28┬░C (рд╕рд┐рдо). рдиреАрдЪреЗ рдорд╛рд░реНрдЧ.',
        'virtual_darshan': 'рд╡рд░реНрдЪреБрдЕрд▓ рдХрддрд╛рд░ рдкреНрд░рдмрдВрдзрди',
        'elderly_priority': 'рд╡реГрджреНрдз/рдЕрдкрдВрдЧ рдХреЗ рд▓рд┐рдП рдкреНрд░рд╛рдердорд┐рдХрддрд╛ (#7)',
        'join_btn': 'рдбрд┐рдЬрд┐рдЯрд▓ рджрд░реНрд╢рди рдкрд╛рд╕ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ',
        'simulate_turn': 'рдЕрдкрдиреА рдмрд╛рд░реА рд╕рд┐рдореБрд▓реЗрдЯ рдХрд░реЗрдВ',
        'token_issued': 'рдкрд╛рд╕ рдЬрд╛рд░реА! рдкреНрд░рддреАрдХреНрд╖рд╛: {} рдорд┐рди. рд╕реНрд▓реЙрдЯ: {}. рд░реАрдпрд▓-рдЯрд╛рдЗрдо рдЕрдкрдбреЗрдЯ.',
        'your_turn': 'рдЖрдкрдХреА рдмрд╛рд░реА! рдЖрдЧреЗ рдмрдврд╝реЗрдВ.',
        'emergency_sos': 'SOS рдмрдЯрди (#4)',
        'press_sos': 'ЁЯЪи SOS рджрдмрд╛рдПрдВ',
        'sos_sent': 'SOS рднреЗрдЬрд╛! рдлрд░реНрд╕реНрдЯ рд░рд┐рд╕реНрдкреЙрдиреНрдбрд░реНрд╕ рдЕрд▓рд░реНрдЯ. рдбреНрд░реЛрди рднреЗрдЬрд╛.',
        'voice_guide': 'рд╡реЙрдЗрд╕-рдЧрд╛рдЗрдбреЗрдб рдиреЗрд╡рд┐рдЧреЗрд╢рди (#7)',
        'audio_sim': "рд╡реЙрдЗрд╕: '50m рдореЗрдВ рдмрд╛рдПрдВ рдореБрдбрд╝реЗрдВ рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рдПрдВрдЯреНрд░реА рдХреА рдУрд░ред'",
        'surge_alert': 'рд╕рд░реНрдЬ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди: рд╕реНрд▓реЙрдЯреНрд╕ рд╕реАрдорд┐рдд (#1 тЖТ #2)',
        'scan_now': 'CCTV/рд╕реЗрдВрд╕рд░/рдбреНрд░реЛрди рд╕реНрдХреИрди',
        'crowded': 'рднреАрдбрд╝ (рдЙрдЪреНрдЪ рдШрдирддреНрд╡)',
        'safe': 'рд╕реБрд░рдХреНрд╖рд┐рдд',
        'panic_detected': 'ЁЯЪи {} рдкрд░ рдкреИрдирд┐рдХ! рдЕрд▓рд░реНрдЯ рдЯреНрд░рд┐рдЧрд░ (#3 тЖТ #4). рдРрдк рдХреЛ рд╕реВрдЪрд┐рдд (#6).',
        'active_queues': 'рдХрддрд╛рд░реЗрдВ рдФрд░ рдЕрд▓рд░реНрдЯ (#2, #4)',
        'no_alerts': 'рдХреЛрдИ рдЕрд▓рд░реНрдЯ рдирд╣реАрдВред',
        'dispatch': 'рд░рд┐рд╕реНрдкреЙрдиреНрдбрд░реНрд╕ рднреЗрдЬреЗрдВ',
        'dispatched': 'рднреЗрдЬрд╛! (рдкреБрд▓рд┐рд╕/рдореЗрдбрд┐рдХрд▓).',
        'parking_mobility': 'рдкрд╛рд░реНрдХрд┐рдВрдЧ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдФрд░ рд╢рдЯрд▓ (#5)',
        'empty_spots': 'рдЦрд╛рд▓реА рд╕реНрдерд╛рди: {}/10. рдкреБрд▓рд┐рд╕-рдПрдХреАрдХреГрдд рдлреНрд▓реЛ.',
        'footer': '4 рдордВрджрд┐рд░реЛрдВ рдХреЗ рд▓рд┐рдП рд╕реНрдХреЗрд▓реЗрдмрд▓: рдЕрдВрдмрд╛рдЬреА, рджреНрд╡рд╛рд░рдХрд╛, рдкрд╛рд╡рд╛рдЧрдврд╝, рд╕реЛрдордирд╛рдеред рд╕рднреА 7 рдлреАрдЪрд░реНрд╕ рдПрдХреАрдХреГрддред тЭдя╕П',
        'predicted_crowd': 'рдЕрдиреБрдорд╛рдирд┐рдд рднреАрдбрд╝',
        'temple_timings': 'рд╕рдордп: 5AM-9PM (#6)',
        'facilities': 'рд╕реБрд╡рд┐рдзрд╛рдПрдВ: рд░реЗрд╕реНрдЯреЛрд░реВрдо, рдЦрд╛рдирд╛, рдореЗрдбрд┐рдХрд▓ (#6)',
        'emergency_contacts': 'рд╕рдВрдкрд░реНрдХ: рдкреБрд▓рд┐рд╕ 100, рдореЗрдбрд┐рдХрд▓ 108 (#6)',
        'routes': 'рдорд╛рд░реНрдЧ: рдЧреЗрдЯ тЖТ рд╣реЙрд▓ тЖТ рдПрдХреНрдЬрд┐рдЯ (#6)',
        'medical_map': 'рдореЗрдбрд┐рдХрд▓ рдореИрдкрд┐рдВрдЧ (#4)',
        'barricades': 'рд╕реНрдорд╛рд░реНрдЯ рдмреИрд░рд┐рдХреЗрдбреНрд╕ (#4)',
        'drone_dispatch': 'рдХреИрдорд░рд╛/рд╕реНрдкреАрдХрд░/рдХрд┐рдЯ рдХреЗ рд╕рд╛рде рдбреНрд░реЛрди рднреЗрдЬрд╛ (#4)',
        'dynamic_slots': 'рдбрд╛рдпрдирд╛рдорд┐рдХ рд╕реНрд▓реЙрдЯреНрд╕: рдХрдо рдорд╛рдВрдЧ рдореЗрдВ рдореБрдлреНрдд (#2)',
        'voice_nav': 'рджреГрд╖реНрдЯрд┐рдмрд╛рдзрд┐рдд рдХреЗ рд▓рд┐рдП рд╡реЙрдЗрд╕ рдореЛрдб (#7)',
        'shuttle_schedule': 'рд╢рдЯрд▓ рдХреЛрдСрд░реНрдбрд┐рдиреЗрд╢рди (#5)',
        'traffic_flow': 'рдбрд╛рдпрдирд╛рдорд┐рдХ рдЯреНрд░реИрдлрд┐рдХ (#5)'
    }
}
# Session State for persistence
if 'queue_data' not in st.session_state:
    st.session_state.queue_data = []
if 'alerts' not in st.session_state:
    st.session_state.alerts = []
if 'surge_active' not in st.session_state:
    st.session_state.surge_active = False
if 'crowd_alert_sent' not in st.session_state:
    st.session_state.crowd_alert_sent = False
if 'drone_dispatched' not in st.session_state:
    st.session_state.drone_dispatched = False

# Step 1: AI Crowd Prediction Model (#1) - Updated with 2025 data
@st.cache_data
def load_and_train_model():
    np.random.seed(42)
    dates = pd.date_range(start='2024-01-01', end='2026-01-01', freq='D')  # Extended for 2025
    n = len(dates)
    base_footfall = 50000  # Updated from Somnath stats: >50K daily
    # Key 2025 Gujarat festivals for Somnath peaks
    festivals = ['2025-01-14', '2025-02-26', '2025-10-20', '2025-11-15', '2025-09-29', '2025-10-07']  # Uttarayan, Shivratri, Diwali, Kartik Purnima, Navratri
    is_festival = [1 if d.strftime('%Y-%m-%d') in festivals else 0 for d in dates]
    temp = np.random.normal(28, 5, n).clip(15, 40)
    is_holiday = [(d.weekday() >= 5) or isf for d, isf in zip(dates, is_festival)]
    festival_boost = np.array(is_festival) * 50000  # Peaks to 100K+
    holiday_boost = np.array(is_holiday) * 10000
    weather_factor = (30 - temp) / 10
    noise = np.random.normal(0, 5000, n)
    footfall = (base_footfall + festival_boost + holiday_boost + weather_factor * 5000 + noise).clip(0, 150000)
    
    df = pd.DataFrame({'date': dates, 'footfall': footfall, 'temperature': temp, 'is_festival': is_festival, 'is_holiday': is_holiday})
    df['month'] = df['date'].dt.month
    df['dayofweek'] = df['date'].dt.dayofweek
    features = ['temperature', 'is_festival', 'is_holiday', 'month', 'dayofweek']
    X = df[features]
    y = df['footfall']
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    return model, features, df

model, features, historical_df = load_and_train_model()

def predict_crowd(days_ahead=7):
    try:
        future_dates = pd.date_range(start=datetime.now().date(), periods=days_ahead, freq='D')
        future_n = len(future_dates)
        future_temp = np.random.normal(28, 5, future_n).clip(15, 40)  # TODO: Replace with OpenWeather API
        future_fest = [1 if d.strftime('%Y-%m-%d') in ['2025-10-20', '2025-11-01', '2025-11-15'] else 0 for d in future_dates]  # Upcoming
        future_hol = [(d.weekday() >= 5) or ff for d, ff in zip(future_dates, future_fest)]
        future_df = pd.DataFrame({'date': future_dates, 'temperature': future_temp, 'is_festival': future_fest, 'is_holiday': future_hol})
        future_df['month'] = future_df['date'].dt.month
        future_df['dayofweek'] = future_df['date'].dt.dayofweek
        X_future = future_df[features]
        predictions = model.predict(X_future)
        future_df['predicted_footfall'] = predictions
        return future_df
    except Exception as e:
        st.error(f"Prediction error: {e}")
        return pd.DataFrame()

# Step 2: Smart Queue System (#2, #7 - Priority for elderly)
queue_data = []  # Simulated queue: [{'user_id': 1, 'join_time': ts, 'priority': False, 'lang': 'en', 'slot': '10:00'}]

def join_queue(user_id, priority=False, lang='English'):
    now = datetime.now()
    pred_df = predict_crowd(1)
    surge_penalty = 30 if (not pred_df.empty and pred_df['predicted_footfall'].iloc[0] > 100000) else 0  # Auto-cap on surge (#1 integration)
    base_wait = np.random.randint(30, 120)
    est_wait = base_wait + (0 if priority else 15) - surge_penalty  # Priority reduces wait
    slot = (now + timedelta(minutes=est_wait)).strftime('%H:%M')
    entry = {'user_id': user_id, 'join_time': now, 'priority': priority, 'lang': lang, 'slot': slot, 'status': 'Waiting', 'est_wait': est_wait}
    queue_data.append(entry)
    return TRANSLATIONS[lang]['token_issued'].format(est_wait, slot)

# Step 3: Surveillance & Emergency (#3, #4)
alerts = []  # [{'type': 'panic', 'location': 'Main Gate', 'time': ts, 'severity': 'High'}]

def simulate_monitoring():
    density = np.random.uniform(0.3, 0.9)
    if density > 0.8:
        if np.random.choice([True, False], p=[0.3, 0.7]):
            alert = {'type': 'Panic Detected', 'location': np.random.choice(['Main Gate', 'Darshan Hall', 'Parking']), 'time': datetime.now(), 'severity': 'High'}
            alerts.append(alert)
            return alert, density
    return None, density

# Step 4: Traffic Map (#5) - Folium; fallback plot if not installed
def create_parking_map():
    try:
        m = folium.Map(location=[20.8869, 70.3907], zoom_start=15)  # Somnath
        spots = [(20.887, 70.391), (20.886, 70.390)]  # Simulated empty spots
        for spot in spots:
            folium.Marker(spot, popup="Empty Parking", icon=folium.Icon(color='green')).add_to(m)
        folium.Marker([20.8869, 70.3907], popup="Temple").add_to(m)
        return m
    except:
        # Fallback matplotlib plot
        fig, ax = plt.subplots()
        ax.scatter([70.391, 70.390], [20.887, 20.886], c='green', marker='o', s=100)
        ax.scatter(70.3907, 20.8869, c='red', marker='^', s=100)
        ax.set_title('Parking Map (Fallback)')
        ax.set_xlabel('Lon'); ax.set_ylabel('Lat')
        st.pyplot(fig)
        return None

# Streamlit App
st.set_page_config(page_title="Yatra Sevak v2", layout="wide")

# Sidebar
lang = st.sidebar.selectbox(TRANSLATIONS['English']['language'], ['English', 'Gujarati', 'Hindi'])
t = TRANSLATIONS[lang]
role = st.sidebar.selectbox(t['view_as'], [t['pilgrim_app'], t['authority_dashboard']])
st.sidebar.title(t['title'])

if role == t['pilgrim_app']:
    tab1, tab2, tab3 = st.tabs([t['home_info'], t['join_queue'], t['sos_nav']])
    
    with tab1:
        st.header(t['temple_info_wait'])
        pred_df = predict_crowd(3)
        if not pred_df.empty:
            st.dataframe(pred_df[['date', 'predicted_footfall']].rename(columns={'predicted_footfall': t['predicted_crowd']}))
        st.info(t['current_weather'])
        folium_static(create_parking_map())  # Traffic/Parking (#5)
    
    with tab2:
        st.header(t['virtual_darshan'])
        priority = st.checkbox(t['elderly_priority'])
        if st.button(t['join_btn']):
            user_id = len(queue_data) + 1
            msg = join_queue(user_id, priority, lang)
            st.success(t['msg'], lang)
        if st.button(t['simulate_turn']):
            st.balloons()
            st.success(t['your_turn'])
    
    with tab3:
        st.header(t['emergency_sos'])
        if st.button(t['press_sos']):
            st.error(t['sos_sent'])
            # Voice sim for accessibility
            st.info(t['audio_sim'])
        st.header(t['voice_guide'])
        if st.button(t['voice_guide']):
            st.info(t['audio_sim'])

elif role == t['authority_dashboard']:
    tab1, tab2, tab3, tab4 = st.tabs([t['prediction'], t['surveillance'], t['queue_alerts'], t['traffic']])
    
    with tab1:
        st.header(t['prediction'])
        pred_df = predict_crowd(7)
        if not pred_df.empty:
            st.dataframe(pred_df)
            fig, ax = plt.subplots()
            ax.bar([d.strftime('%Y-%m-%d') for d in pred_df['date']], pred_df['predicted_footfall'])
            ax.set_title(t['predicted_crowd'] + ' (Next 7 Days)')
            plt.xticks(rotation=45)
            st.pyplot(fig)
            high_surge = pred_df[pred_df['predicted_footfall'] > 100000]
            if not high_surge.empty:
                st.warning(t['surge_alert'].format(high_surge['date'].iloc[0].strftime('%Y-%m-%d')))
    
    with tab2:
        st.header(t['surveillance'])
        if st.button(t['scan_now']):
            alert, density = simulate_monitoring()
            fig, ax = plt.subplots()
            ax.pie([density, 1-density], labels=[t['crowded'], t['safe']], autopct='%1.1f%%')
            st.pyplot(fig)
            if alert:
                st.error(t['panic_detected'].format(alert['type'], alert['location'], alert['severity']))
    
    with tab3:
        st.header(t['active_queues'])
        if queue_data:
            q_df = pd.DataFrame(queue_data)
            st.dataframe(q_df)
        if alerts:
            a_df = pd.DataFrame(alerts)
            st.dataframe(a_df)
            if st.button(t['dispatch']):
                st.success(t['dispatched'])
        else:
            st.info(t['no_alerts'])
    
    with tab4:
        st.header(t['parking_mobility'])
        folium_static(create_parking_map())
        st.info(t['empty_spots'])

st.markdown("---")
st.caption(t['footer'])
